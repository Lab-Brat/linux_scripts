---
- hosts: all
  become: yes
  vars:
    user:    'app_master'
    pg_conf: '/var/lib/pgsql/data/postgresql.conf'
    pg_hba:  '/var/lib/pgsql/data/pg_hba.conf'
    gitrepo: 'https://github.com/Lab-Brat/flask_masque.git'
    git_app: "/home/{{ user }}/flask_masque"
    bashrc:  "/home/{{ user }}/.bashrc"
    dumps:   "/home/{{ user }}/dumps"
    samples: "{{ git_app }}/samples"
    env_app: 'app.py'
    env_mod: 'development'
    db_port: 5433
    db_user: "{{ user }}"
    db_name: 'masq_forms'
    db_pass: 'password'
    os_environment:
      - key: FLASK_APP
        value: "{{ env_app }}"
      - key: FLASK_ENV
        value: 'development'
      - key: DB_PORT
        value: "{{ db_port }}"
      - key: DB_USER
        value: "{{ db_user }}"
      - key: DB_NAME
        value: "{{db_name}}"
      - key: DB_PASS
        value: "{{db_pass}}"
      - key: DB_URI
        value: "postgresql://{{db_user}}:{{db_pass}}@127.0.0.1:{{db_port}}/{{db_name}}"

  tasks:
  - block:
      - name: create user if it doesn't exist
        ansible.builtin.user:
          name: "{{ user }}"
          shell: /bin/bash
          home: "/home/{{ user }}"
          groups: wheel
          append: yes

      - name: install pip , git and PostgreSQL
        dnf:
          name: '{{ item }}'
          state: present
        with_items:
          - python3-pip
          - python3-psycopg2
          - git
          - postgresql
          - postgresql-server

      - name: install Python libraries
        pip: 
          name: "{{ item }}"
          extra_args: --user
        with_items:
          - Flask
          - flask-migrate
          - SQLAlchemy
          - psycopg2
        become_user: "{{ user }}"

      - name: disable SELinux
        ansible.posix.selinux:
          state: disabled
        register: selinuxdisabled

      - name: reboot for SELinux change to take effect
        shell: "sleep 5 && reboot"
        async: 1
        poll: 0
        when: selinuxdisabled is changed

      - name: wait for the reboot to complete
        wait_for_connection:
          connect_timeout: 30
          sleep: 5
          delay: 5
          timeout: 300
        when: selinuxdisabled is changed

      - name: clone github repository with forms app
        ansible.builtin.git:
          repo: '{{ gitrepo }}'
          dest: '{{ git_app }}'
          clone: yes
          update: no
        become_user: "{{ user }}"

      - name: set environmental variables
        ansible.builtin.lineinfile:
          dest: "/etc/environment"
          state: present
          regexp: "^{{ item.key }}="
          line: "{{ item.key }}={{ item.value }}"
        with_items: "{{ os_environment }}"

      - name: create the folder for database dumps
        file:
          state: directory
          path: "{{ dumps }}"
          owner: "{{ user }}"
          group: "{{ user }}"
      
      - name: change ownership of the app folder
        ansible.builtin.file:
          path: '{{ git_app }}'
          state: directory
          recurse: yes
          owner: "{{ user }}"
          group: "{{ user }}"

      - name: find out if PostgreSQL is initialized
        ansible.builtin.stat:
          path: "{{ pg_hba }}"
        register: postgres_data 

      - name: initialize postgres
        shell: "/usr/bin/postgresql-setup --initdb"
        when: not postgres_data.stat.exists

      - name: start PostgreSQL server
        service: name='postgresql' state=started enabled=yes

      - name: change postgresql.conf
        ansible.builtin.lineinfile:
          path: '{{ pg_conf }}'
          regexp: "listen_addresses = 'localhost'"
          line: "listen_addresses = '*'"

      - name: change pg_hba.conf - change port
        ansible.builtin.lineinfile:
          path: '{{ pg_conf }}'
          regexp: "port = 5432"
          line: "port = {{ db_port }}"

      - name: change pg_hba.conf
        ansible.builtin.lineinfile:
          path: '{{ pg_hba }}'
          regexp: "host    all             all             127.0.0.1/32            ident"
          line: "host    all             all             127.0.0.1/32            trust"

      - name: restart postgresql for config changes to take effect
        ansible.builtin.service:
          name: postgresql
          state: restarted

      - name: remove app database if it exists
        postgresql_db:
          state: absent
          name: "{{ db_name }}"
          port: "{{ db_port }}"
        become: yes
        become_user: postgres

      - name: create app database
        postgresql_db:
          state: present
          name: "{{ db_name }}"
          port: "{{ db_port }}"
        become: yes
        become_user: postgres
  
      - name: create db user
        postgresql_user:
          state: present
          name: "{{ db_user }}"
          password: "{{ db_pass }}"
          port: "{{ db_port }}"
        become: yes
        become_user: postgres
  
      - name: grant db user access to app db
        postgresql_privs:
          type: database
          database: "{{ db_name }}"
          roles: "{{ db_user }}"
          grant_option: no
          privs: all
          port: "{{ db_port }}"
        become: yes
        become_user: postgres

      - name: allow port 5000 in firewalld 
        ansible.posix.firewalld:
          port: 5000/tcp
          permanent: yes
          immediate: yes
          state: enabled

      - name: check if the migrations folder exists
        ansible.builtin.stat:
          path: "{{ git_app }}/migrations"
        register: migrations
 
      - name: initialize the database
        shell: '~/.local/bin/flask db init'
        args:
          chdir: "{{ git_app }}"
        become_user: "{{ user }}"
        when: not migrations.stat.exists

      - name: make db up to date
        shell: '~/.local/bin/flask db stamp head'
        args:
          chdir: "{{ git_app }}"
        become_user: "{{ user }}"

      - name: migrate the database
        shell: '~/.local/bin/flask db migrate'
        args:
          chdir: "{{ git_app }}"
        become_user: "{{ user }}"

      - name: upgrade the database
        shell: '~/.local/bin/flask db upgrade'
        args:
          chdir: "{{ git_app }}"
        become_user: "{{ user }}"

      - name: add sample data
        command: "sh {{ samples }}/add_entries.sh"
        become_user: "{{ user }}"
        
    when: ansible_distribution == 'AlmaLinux'

